*Find All Anagrams in a String*

Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.
****************************************************************************************************************************************

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input:
s: "abab" p: "ab"

Output:
[0, 1, 2]

Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".


****************************************************************************************************************************************

class Solution:
    def findAnagrams(self, s: str, p: str) -> List[int]:
        res =[]
        plength = len(p)
        pcount = Counter(p);
        scount = Counter(s[:plength-1])
        
        for i in range(plength-1, len(s)) :
            scount[s[i]] +=1
            if pcount == scount :
                res.append(i - plength +1);
            scount[s[i - plength +1]] -= 1
            if scount[s[i - plength +1]] == 0 :  
                scount.pop(s[i - plength +1]);
                
        return res;       
    
****************************************************************************************************************************************
            
Status: Accepted
36 / 36 test cases passed
Runtime: 280 ms
Memory Usage: 15 MB         
