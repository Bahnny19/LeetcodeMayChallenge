*Course Schedule*
There are a total of numCourses courses you have to take, labeled from 0 to numCourses-1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

*************************************************************************************************************************************

Example 1:
Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0. So it is possible.

Example 2:
Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0, and to take course 0 you should
             also have finished course 1. So it is impossible.
             
*************************************************************************************************************************************

Constraints:

The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.
You may assume that there are no duplicate edges in the input prerequisites.
1 <= numCourses <= 10^5

*************************************************************************************************************************************

class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        self.graph = defaultdict(set);
        for u,v in prerequisites :
            self.graph[u].add(v)
            
        self.visited = [0]*numCourses # 0 for not visited, 1 for visited, 2 for visited including all neighbors    
        self.isCycle=0
        
        for i in range(numCourses):
            if self.isCycle :
                return False
            if self.visited[i] == 0 :
                self.DFS(i, self.isCycle)
                
        return self.isCycle == 0
    
    def DFS (self, i, isCycle):
        if self.isCycle == 1 :
            return False
        if self.visited[i] == 1 :
            self.isCycle = 1
        if self.visited[i] == 0 : 
            self.visited[i] = 1
            for j in self.graph[i] :
                self.DFS (j, self.isCycle)                
            self.visited[i] = 2
    
*************************************************************************************************************************************

46 / 46 test cases passed.
Status: Accepted
Runtime: 100 ms
Memory Usage: 16.1 MB
