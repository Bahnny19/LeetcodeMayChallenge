*Single Element in a Sorted Array*

You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once. Find this single element that appears only once.

 ***************************************************************************************************************************************

Example 1:

Input: [1,1,2,3,3,4,4,8,8]
Output: 2

Example 2:

Input: [3,3,7,7,10,11,11]
Output: 10
 
 ***************************************************************************************************************************************

Note: Your solution should run in O(log n) time and O(1) space.

 ***************************************************************************************************************************************
 
 class Solution:
    def singleNonDuplicate(self, nums: List[int]) -> int:
        res = 0;
        for i in nums :
            res ^= i;
        return res;
    
        # Alternate approach with same complexity
        # count = Counter(nums);
        # for i in count :
        #    if (count[i] == 1) : return i;
        
 ***************************************************************************************************************************************
 
Status: Accepted
12 / 12 test cases passed.
Runtime: 68 ms
Memory Usage: 16.2 MB
 
   
