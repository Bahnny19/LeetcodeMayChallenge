*Edit Distance*
Given two words word1 and word2, find the minimum number of operations required to convert word1 to word2.

You have the following 3 operations permitted on a word:

Insert a character
Delete a character
Replace a character

************************************************************************************************************************************

Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')

Example 2:

Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')

************************************************************************************************************************************

class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        m,n = len(word1), len(word2)
        if m * n == 0:
            return m + n
        res = [[0] * (n + 1) for i in range(m + 1)]
        print(res)
        for i in range(m+1) :
            res[i][0] = i
        for i in range(n+1) :
            res[0][i] = i
            
        for i in range(1,m+1) :
            for j in range(1,n+1):
                if word1[i-1] == word2[j-1] :
                    res[i][j] = res[i-1][j-1]
                else :
                    res[i][j] = 1 + min(res[i-1][j-1], res[i][j-1], res[i-1][j])
                    
        return res[m][n]            
    
************************************************************************************************************************************

1146 / 1146 test cases passed.
Status: Accepted
Runtime: 176 ms
Memory Usage: 17.2 MB

************************************************************************************************************************************

